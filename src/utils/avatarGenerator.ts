export interface GeneratedAvatar {
  svg: string;
  color: string;
}

// Safe colors for human icons (foreground colors) - optimized for blue background
const SAFE_COLORS = [
  '#111827', // Slate 900 (almost black, neutral)
  '#1F2937', // Slate 800 (dark gray)
  '#374151', // Slate 700 (medium-dark gray)

  '#B45309', // Amber 700
  '#92400E', // Amber 800

  '#B91C1C', // Red 700
  '#991B1B', // Red 800

  '#15803D', // Green 700
  '#166534', // Green 800

  '#0369A1', // Sky 700
  '#075985', // Sky 800

  '#7E22CE', // Purple 700
  '#6B21A8', // Purple 800

  '#C2410C', // Orange 700
  '#9A3412', // Orange 800

  '#A16207', // Yellow 700
  '#854D0E', // Yellow 800

  '#BE185D', // Pink 700
  '#9D174D', // Pink 800
];

/**
 * Determine age group from date of birth
 * @param dateOfBirth - Date of birth string (YYYY-MM-DD format)
 * @returns 'young' for 18-35, 'old' for 36+
 */
export const getAgeGroupFromDateOfBirth = (dateOfBirth: string): 'young' | 'old' => {
  const birthDate = new Date(dateOfBirth);
  const today = new Date();
  let age = today.getFullYear() - birthDate.getFullYear();
  
  // Check if birthday has occurred this year
  const monthDiff = today.getMonth() - birthDate.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
    age--;
  }
  
  return age <= 35 ? 'young' : 'old';
};

/**
 * Generate a random color from the safe colors array
 */
const getRandomColor = (): string => {
  const randomIndex = Math.floor(Math.random() * SAFE_COLORS.length);
  return SAFE_COLORS[randomIndex];
};

/**
 * Generate a placeholder avatar SVG with blue background and random color human icon
 */
export const generatePlaceholderAvatar = (): GeneratedAvatar => {
  const color = getRandomColor();
  
  // Blue background (same as the Avatar component)
  const bg = "#0078D7";

  const svg = `
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="508"
      height="432"
      viewBox="0 0 508 432"
      role="img"
      aria-label="Avatar"
    >
      <!-- Background -->
      <path xmlns="http://www.w3.org/2000/svg" d="M0 0 C167.64 0 335.28 0 508 0 C508 142.56 508 285.12 508 432 C340.36 432 172.72 432 0 432 C0 289.44 0 146.88 0 0 Z " fill="${bg}" transform="translate(0,0)"/>

      <!-- Silhouette -->
      <path
        d="M0 0 C0.6655188 0.00281982 1.3310376 0.00563965 2.01672363 0.00854492 C28.73691293 0.1787679 51.92547024 8.62202758 70.98339844 27.85205078 C82.66649522 40.11315341 89.71775383 55.90920778 93.375 72.3125 C93.64207764 73.42057007 93.64207764 73.42057007 93.91455078 74.55102539 C95.81070277 83.34432581 95.59927111 92.05717135 95.5 101 C95.48994496 102.58788495 95.4808236 104.1757761 95.47265625 105.76367188 C95.45085443 109.61343725 95.41646559 113.46289827 95.375 117.3125 C96.14457031 117.58578125 96.91414063 117.8590625 97.70703125 118.140625 C102.18715863 120.10847012 104.65268502 123.55974966 106.4921875 128.0234375 C110.09552461 141.44825985 106.81564453 155.38809789 100.765625 167.546875 C97.22261265 173.56024459 93.27815144 177.62944682 87.375 181.3125 C83.61479186 183.81930543 83.05635809 186.41304235 81.6875 190.5 C76.64479336 204.58397928 69.33615928 219.76644828 57.75097656 229.70581055 C55.93783692 231.82296313 55.97505351 233.08496632 55.94140625 235.84765625 C55.92400391 237.17869385 55.92400391 237.17869385 55.90625 238.53662109 C55.92171875 239.94161865 55.92171875 239.94161865 55.9375 241.375 C55.94652344 242.32713379 55.95554687 243.27926758 55.96484375 244.26025391 C56.18076541 252.99758371 57.27431566 259.62212022 63.6875 265.9375 C74.89713604 274.50164057 88.15140425 279.41626727 101.25918579 284.23999023 C105.91780702 285.95672569 110.56161463 287.71276026 115.20703125 289.46484375 C116.10530136 289.80285004 117.00357147 290.14085632 117.92906189 290.48910522 C146.6899833 301.33300108 168.24058952 312.04601559 181.47460938 341.20263672 C188.28850574 357.16947305 189.41009709 372.94424754 190.375 390.3125 C65.635 390.3125 -59.105 390.3125 -187.625 390.3125 C-186.4589246 368.15706745 -186.4589246 368.15706745 -184.875 360.9375 C-184.700896 360.11008301 -184.52679199 359.28266602 -184.34741211 358.43017578 C-182.79919609 351.42604922 -180.58617113 344.85250986 -177.625 338.3125 C-177.24601562 337.44625 -176.86703125 336.58 -176.4765625 335.6875 C-163.80198783 308.46693694 -138.73212685 298.65430072 -112.22932434 288.94970703 C-109.97113956 288.12656409 -107.71282002 287.30379352 -105.4543457 286.48144531 C-88.41359865 280.31908137 -88.41359865 280.31908137 -71.875 272.9375 C-70.73466309 272.38545898 -70.73466309 272.38545898 -69.57128906 271.82226562 C-63.25243368 268.55359078 -57.60303444 264.25733011 -54.7265625 257.56640625 C-53.15036391 252.54121397 -53.03545959 247.48028882 -53 242.25 C-52.95488281 241.29544922 -52.90976563 240.34089844 -52.86328125 239.35742188 C-52.79781314 234.00568925 -52.79781314 234.00568925 -55.05395508 229.29492188 C-56.84335141 227.53923283 -58.71541471 225.93524314 -60.625 224.3125 C-70.32608975 213.28153256 -78.21164835 198.84072028 -80.76171875 184.31640625 C-81.46528496 182.07245275 -81.46528496 182.07245275 -83.95703125 181.22265625 C-84.83746094 180.92230469 -85.71789062 180.62195313 -86.625 180.3125 C-97.56053444 172.64934139 -101.66465358 162.16650802 -104.2109375 149.3671875 C-105.6058565 139.07636995 -105.70473739 130.04995117 -99.625 121.3125 C-97.5 118.6875 -97.5 118.6875 -95.625 117.3125 C-94.635 117.3125 -93.645 117.3125 -92.625 117.3125 C-92.6564209 115.92466309 -92.6564209 115.92466309 -92.68847656 114.50878906 C-93.3211095 82.27654154 -91.28883944 52.46606186 -67.984375 27.71484375 C-67.20578125 26.92207031 -66.4271875 26.12929687 -65.625 25.3125 C-64.88765625 24.55066406 -64.1503125 23.78882812 -63.390625 23.00390625 C-46.28289918 6.44156095 -23.31348148 -0.10530556 0 0 Z " transform="translate(255.625,41.6875)"
        fill="${color}"
      />
    </svg>
  `;

  return { svg, color };
};

/**
 * Convert SVG string to File object for upload
 */
export const svgToFile = (svg: string, filename: string): File => {
  const blob = new Blob([svg], { type: 'image/svg+xml' });
  return new File([blob], filename, { type: 'image/svg+xml' });
};

/**
 * Generate a placeholder avatar and convert to File
 */
export const generatePlaceholderAvatarFile = (userId: string): { file: File; color: string } => {
  const { svg, color } = generatePlaceholderAvatar();
  const filename = `${userId}_placeholder_avatar_${Date.now()}.svg`;
  const file = svgToFile(svg, filename);
  
  return { file, color };
}; 